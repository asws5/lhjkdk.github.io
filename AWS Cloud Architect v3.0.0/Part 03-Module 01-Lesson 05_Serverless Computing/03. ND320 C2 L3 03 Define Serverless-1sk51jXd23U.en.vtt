WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.275
AWS Lambda, often called Lambda for short,

00:00:04.275 --> 00:00:08.024
is a name of Amazon's serverless computing service.

00:00:08.024 --> 00:00:13.065
Lambda lets you run your code without having to provision or manage any servers,

00:00:13.065 --> 00:00:15.255
and as we discussed before,

00:00:15.255 --> 00:00:18.360
you only pay for the compute time you use.

00:00:18.360 --> 00:00:23.100
Lambda automatically scales because it runs your code as it's triggered.

00:00:23.100 --> 00:00:26.895
Swish triggers bonds an individual Lambda function.

00:00:26.895 --> 00:00:32.250
Your code will run as many parallel threads as necessary to process the workload.

00:00:32.250 --> 00:00:34.770
The process works like this;

00:00:34.770 --> 00:00:39.465
you upload your code or write it in the built-in Lambda code editor.

00:00:39.465 --> 00:00:43.460
You configure your code to trigger based on an event,

00:00:43.460 --> 00:00:46.400
and Lambda runs your code when triggered using

00:00:46.400 --> 00:00:50.375
only the necessary amount of compute required to carry out the task,

00:00:50.375 --> 00:00:53.500
and you only pay for the compute time used.

00:00:53.500 --> 00:00:58.655
You are charged for every gigabyte second of compute time used,

00:00:58.655 --> 00:01:02.030
rounded to the nearest 100 milliseconds,

00:01:02.030 --> 00:01:06.580
as well as the number of times your code is triggered by an event.

00:01:06.580 --> 00:01:12.460
AWS Lambda isn't the only component of AWS serverless architecture.

00:01:12.460 --> 00:01:16.430
Because of the nature of events that trigger functions in Lambda,

00:01:16.430 --> 00:01:21.275
AWS offers complimentary services that natively integrate with Lambda,

00:01:21.275 --> 00:01:23.140
and here are some examples.

00:01:23.140 --> 00:01:27.860
You can evoke AWS Lambda functions over HTTPS by

00:01:27.860 --> 00:01:33.140
defining a custom REST API and endpoint using Amazon API gateway,

00:01:33.140 --> 00:01:39.150
and then mapping individual methods such as get and put to specific Lambda functions.

00:01:39.150 --> 00:01:43.935
You can use a Lambda function to process messages in an SQS queue,

00:01:43.935 --> 00:01:46.610
and in an event-driven system,

00:01:46.610 --> 00:01:49.310
DynamoDB can be the event source and

00:01:49.310 --> 00:01:53.110
Lambda functions can be evoked in response to the events.

00:01:53.110 --> 00:01:57.245
DynamoDB has a feature called DynamoDB Streams,

00:01:57.245 --> 00:02:00.125
where after it's enabled on a table,

00:02:00.125 --> 00:02:05.960
all modifications to that table are recorded and pushed in order into the stream,

00:02:05.960 --> 00:02:09.805
making the stream data the trigger for the Lambda function.

00:02:09.805 --> 00:02:15.260
AWS Step Functions is an AWS service that lets you coordinate

00:02:15.260 --> 00:02:22.015
multiple AWS services into serverless workflows so you can build and update apps quickly.

00:02:22.015 --> 00:02:26.000
The Amazon Cognito Events feature enables you to run

00:02:26.000 --> 00:02:30.100
Lambda functions in response to events in Amazon Cognito.

00:02:30.100 --> 00:02:33.680
For example, you can invoke a Lambda function for

00:02:33.680 --> 00:02:39.295
the Sync Trigger Events that is published each time a data set is synchronized.

00:02:39.295 --> 00:02:42.680
In AWS Lambda, there are a variety of events,

00:02:42.680 --> 00:02:45.339
sources that can trigger Lambda functions,

00:02:45.339 --> 00:02:48.830
but because you are only billed for the time your function is running,

00:02:48.830 --> 00:02:51.620
when implemented properly, Lambda can be among

00:02:51.620 --> 00:02:55.890
the least costly line items on your monthly AWS bill.

