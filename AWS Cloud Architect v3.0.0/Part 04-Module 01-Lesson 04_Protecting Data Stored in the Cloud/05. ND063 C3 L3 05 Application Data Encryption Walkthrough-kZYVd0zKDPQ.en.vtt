WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.370
We will now walk through an example of using

00:00:02.370 --> 00:00:08.330
the AWS encryption SDK to encrypt plain text data and persist it to an S3 bucket.

00:00:08.330 --> 00:00:11.190
I have built a sample application which will run on

00:00:11.190 --> 00:00:14.600
an application server and use client-side encryption,

00:00:14.600 --> 00:00:18.615
and demonstrate the use of client-side encryption in AWS.

00:00:18.615 --> 00:00:20.415
From my AWS account,

00:00:20.415 --> 00:00:23.535
I will log in to the application server to run the code.

00:00:23.535 --> 00:00:28.300
I'll use Systems Manager to log into the application server.

00:00:28.490 --> 00:00:34.300
Let's take a look at the sample application that will perform the encryption.

00:00:35.210 --> 00:00:37.590
As you can see this,

00:00:37.590 --> 00:00:39.640
the code is pretty straightforward.

00:00:39.640 --> 00:00:44.540
The application code is going to take a plaintext message and make

00:00:44.540 --> 00:00:49.835
use of the AWS encryption SDK for Python to encrypt the message.

00:00:49.835 --> 00:00:54.010
So here it's going to encrypt the plaintext message,

00:00:54.010 --> 00:00:59.980
and then it's going to store the message as an object in an S3 bucket.

00:00:59.980 --> 00:01:05.765
I'm going to use the put object call to invoke the S3 API.

00:01:05.765 --> 00:01:11.150
I also have a second application script which is going to do the opposite.

00:01:11.150 --> 00:01:14.075
It's going to decrypt the encrypted data.

00:01:14.075 --> 00:01:16.550
That's again, pretty simple and straightforward.

00:01:16.550 --> 00:01:21.860
First, I'm going to get the object from S3 using the get object call,

00:01:21.860 --> 00:01:24.920
and once I get the object,

00:01:24.920 --> 00:01:30.700
I'm going to use the AWS encryption SDK to decrypt object,

00:01:30.700 --> 00:01:36.580
and then I'm going to just print out the plaintext content of that object.

00:01:36.580 --> 00:01:39.050
At the top of both my applications,

00:01:39.050 --> 00:01:43.410
I've defined the S3 bucket that I'm going to use as an environment variable,

00:01:43.410 --> 00:01:47.600
and I've also defined the KMS key that I'm going to

00:01:47.600 --> 00:01:52.930
use to perform the encryption and decryption operations.

00:01:52.930 --> 00:02:00.090
The application code is going to use an IAM role to make the API

00:02:00.090 --> 00:02:07.565
calls to S3 and the KMS key that's going to be used for encryption and decryption.

00:02:07.565 --> 00:02:11.050
So let's take a look at that IAM role.

00:02:11.050 --> 00:02:14.040
Let's go back to our AWS console.

00:02:14.040 --> 00:02:17.070
I'll go to EC2.

00:02:17.070 --> 00:02:21.155
Let's take a look at the role that the instance is going to be using.

00:02:21.155 --> 00:02:24.005
So the instance is assigned an IAM role.

00:02:24.005 --> 00:02:27.270
So let's remember the name,

00:02:27.370 --> 00:02:31.255
cand-c3-l1-instance-role, that's the role that's going to be used.

00:02:31.255 --> 00:02:33.740
So what we want to do is we want to make sure that

00:02:33.740 --> 00:02:38.690
the KMS master key that's going to

00:02:38.690 --> 00:02:44.015
be used for encryption has allowed this role to use the key.

00:02:44.015 --> 00:02:47.395
I'm going to go to the key management service.

00:02:47.395 --> 00:02:49.545
This is the key that I'm going to use,

00:02:49.545 --> 00:02:51.315
so let's go into this key.

00:02:51.315 --> 00:02:53.625
Take a look at the key policy.

00:02:53.625 --> 00:02:56.360
You can see that, in the Key users,

00:02:56.360 --> 00:03:02.560
I've only allowed this particular role to be using the key.

00:03:02.560 --> 00:03:06.950
That's the role that my instance has been assigned.

00:03:06.950 --> 00:03:16.320
The application code if you recall needed the key ID to perform its operations.

00:03:16.320 --> 00:03:17.995
So I'm going to grab the ARNs.

00:03:17.995 --> 00:03:20.720
I'm going to have to define this as an environment variable in

00:03:20.720 --> 00:03:24.370
my application code. I'm going to copy this.

00:03:24.370 --> 00:03:27.800
I have an environment variable file which,

00:03:27.800 --> 00:03:30.050
this came as key,

00:03:30.050 --> 00:03:32.200
ARN is going to be defined in.

00:03:32.200 --> 00:03:34.250
It looks like it's already defined.

00:03:34.250 --> 00:03:39.665
I'll also define the S3 bucket where the file is going to be written and read from.

00:03:39.665 --> 00:03:42.860
So I'm ready to run my application code.

00:03:42.860 --> 00:03:46.700
This S3 bucket that I'm going to be using does not

00:03:46.700 --> 00:03:51.440
have server-side encryption or any other special security controls enabled.

00:03:51.440 --> 00:03:55.380
I'm just going to be demonstrating client-side Encryption.

00:03:55.430 --> 00:03:58.070
Before I run my application,

00:03:58.070 --> 00:04:00.560
I'm going to source my environment variables.

00:04:00.560 --> 00:04:03.870
Let's just take one look at it again.

00:04:03.920 --> 00:04:06.090
Make sure everything looks good.

00:04:06.090 --> 00:04:11.780
I'm going to source my environment variables and I'm going to run the application.

00:04:11.780 --> 00:04:18.340
I'm going to pass in an arbitrary message that it's going to be encrypted.

00:04:19.700 --> 00:04:24.395
The message was encrypted and stored in the S3 bucket.

00:04:24.395 --> 00:04:29.405
Let's go ahead and take a look at the contents of the S3 bucket to verify.

00:04:29.405 --> 00:04:37.055
As you can see, a new file has been generated in S3.

00:04:37.055 --> 00:04:39.230
Now what I want to do is I'm going to download

00:04:39.230 --> 00:04:44.410
this file and verify that it's indeed encrypted.

00:04:44.410 --> 00:04:47.300
I'm going to go back to my application server.

00:04:47.300 --> 00:04:51.420
I'm going to download the file to the application server.

00:04:52.040 --> 00:04:56.990
First, I'll list out the contents of the S3 bucket.

00:05:01.060 --> 00:05:07.590
Now I'm going to download the file using the copy command,

00:05:15.520 --> 00:05:18.545
and I've downloaded the file.

00:05:18.545 --> 00:05:21.980
Now let's look at the contents of the file.

00:05:23.990 --> 00:05:27.625
The original contents of the file were this message,

00:05:27.625 --> 00:05:30.830
"I want the secret message to be encrypted".

00:05:31.490 --> 00:05:35.340
If it's encrypted, we shouldn't be able to see that message.

00:05:35.340 --> 00:05:38.840
As you can see, it's a bunch of jumbled up ciphertext,

00:05:38.840 --> 00:05:41.155
so our encryption worked.

00:05:41.155 --> 00:05:45.230
The sensitive data that we had put into this file is

00:05:45.230 --> 00:05:51.775
effectively protected from other actors who may have inadvertent access to the S3 bucket.

00:05:51.775 --> 00:05:55.160
Now we can try running the decrypt application,

00:05:55.160 --> 00:06:00.920
which will grab the file from S3 and use the same KMS key to decrypt the data.

00:06:00.920 --> 00:06:07.160
As you can see, the message was successfully decrypted.

00:06:07.160 --> 00:06:10.540
That's our original message if you recall.

00:06:10.540 --> 00:06:14.000
If you're developing applications or need to

00:06:14.000 --> 00:06:17.105
encrypt sensitive data before it lands on disk,

00:06:17.105 --> 00:06:22.990
I advise you to investigate the use of client-side encryption as an additional safeguard.

00:06:22.990 --> 00:06:30.530
Client-side encryption in AWS can be achieved using your preferred language SDKs for AWS,

00:06:30.530 --> 00:06:33.440
or the AWS encryption SDK,

00:06:33.440 --> 00:06:35.870
which we have used in this example,

00:06:35.870 --> 00:06:37.700
or in some cases,

00:06:37.700 --> 00:06:44.765
client-side Encryption SDKs for specific services such as DynamoDB or S3,

00:06:44.765 --> 00:06:47.420
which allow you to have a client-side encryption

00:06:47.420 --> 00:06:51.760
baked into their API calls for the service.

