WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.840
In this exercise, your goal was to get a better understanding of how to manage

00:00:03.840 --> 00:00:08.385
encryption keys in the AWS Key Management System or KMS.

00:00:08.385 --> 00:00:12.090
You set up roles for two different lambda applications and modulated

00:00:12.090 --> 00:00:17.100
key permissions to get a better feel for how to secure and restrict encryption keys.

00:00:17.100 --> 00:00:22.620
You also tested permissions by having the applications read and write encrypted data.

00:00:22.620 --> 00:00:27.415
I will now walk through the steps taken to complete the exercise successfully.

00:00:27.415 --> 00:00:29.585
For my AWS console,

00:00:29.585 --> 00:00:33.935
I have already created two different IAM roles for this exercise.

00:00:33.935 --> 00:00:36.440
Let's take a look at the roles.

00:00:36.440 --> 00:00:43.550
These are the roles. You can see both roles allow a lambda function to invoke them.

00:00:43.550 --> 00:00:47.175
I will now create a KMS key and allow

00:00:47.175 --> 00:00:51.455
the first role to use the key for encryption operations.

00:00:51.455 --> 00:01:00.730
I'll call the key cand-c3-l3-ex2-key,

00:01:00.730 --> 00:01:03.750
and I'll select myself as the key admin,

00:01:03.750 --> 00:01:09.855
and I'm going to find the lambda functions role that I had created.

00:01:09.855 --> 00:01:13.920
So I have two roles: one which is going to allow write operations,

00:01:13.920 --> 00:01:15.470
one is going to allow to read the operations.

00:01:15.470 --> 00:01:20.100
I'm going to select the role that allows write operations for now.

00:01:20.330 --> 00:01:25.430
Create the key. Now that I have the KMS key,

00:01:25.430 --> 00:01:28.055
I'm going to have to get the key ARN,

00:01:28.055 --> 00:01:31.670
which is going to be an input parameter to my lambda functions.

00:01:31.670 --> 00:01:36.410
So go back into the key and get the key ARN.

00:01:36.410 --> 00:01:38.605
I'm going to copy this.

00:01:38.605 --> 00:01:42.255
Let's take a look at the lambda function.

00:01:42.255 --> 00:01:46.930
So first, we'll look at the lambda right function.

00:01:47.720 --> 00:01:51.730
So this function is going to take

00:01:51.980 --> 00:01:59.485
an S3 bucket and a KMS key as environment variables.

00:01:59.485 --> 00:02:02.220
So I have my S3 bucket set.

00:02:02.220 --> 00:02:05.340
I want to set the key ARN.

00:02:05.340 --> 00:02:09.010
This is the key that I just created.

00:02:10.400 --> 00:02:14.960
As you can see, this lambda function is going to be writing

00:02:14.960 --> 00:02:20.300
an object to the S3 bucket using a put object call.

00:02:20.680 --> 00:02:26.600
A put object call has server-side encryption set to

00:02:26.600 --> 00:02:36.060
KMS and it's going to use the key that I just created to encrypt the object.

00:02:36.060 --> 00:02:41.070
To run my function, I have a test event,

00:02:41.070 --> 00:02:43.500
which is just a dummy test event,

00:02:43.500 --> 00:02:49.200
because this function is not using the event handler.

00:02:49.270 --> 00:02:54.220
So I can just hit test here to run my lambda function.

00:02:54.220 --> 00:02:58.800
As you can see, my lambda function ran without error.

00:02:58.800 --> 00:03:06.840
So let's verify that the function had successfully written the file the way we expected.

00:03:06.840 --> 00:03:11.670
So let's go to the S3 bucket and verify that.

00:03:11.670 --> 00:03:18.235
This is the bucket where we wrote the file and this is the file that was just written.

00:03:18.235 --> 00:03:21.160
Let's look at the details of the file.

00:03:21.160 --> 00:03:29.285
As you can see, it has server-side encryption enabled and with the specified KMS key.

00:03:29.285 --> 00:03:31.390
So now, this is an encrypted object.

00:03:31.390 --> 00:03:34.690
Let's try to run the second lambda function,

00:03:34.690 --> 00:03:38.600
which should not have permissions to use the key.

00:03:38.600 --> 00:03:41.410
It's called lambda read.

00:03:41.490 --> 00:03:43.630
Looking at the code,

00:03:43.630 --> 00:03:46.090
we can see that this function is going to retrieve

00:03:46.090 --> 00:03:51.340
that same object using the get object call,

00:03:51.340 --> 00:03:58.185
and it's just going to print out the contents of the file and run the function.

00:03:58.185 --> 00:04:01.485
As you can see, the execution failed.

00:04:01.485 --> 00:04:04.785
We got back an access denied error,

00:04:04.785 --> 00:04:08.535
and that's because this role

00:04:08.535 --> 00:04:12.625
that this lambda function is using does not have permissions to use the key.

00:04:12.625 --> 00:04:17.000
So let's go back to KMS and manage the permissions for

00:04:17.000 --> 00:04:23.980
the key and let's add the role for the second lambda function.

00:04:23.980 --> 00:04:28.600
This is the role that the lambda read function is using.

00:04:30.410 --> 00:04:34.480
So now, let's try to run the function again.

00:04:42.170 --> 00:04:45.520
It succeeded this time.

00:04:46.610 --> 00:04:49.185
Let's look at the output.

00:04:49.185 --> 00:04:53.865
Here, the output is the contents of the file.

00:04:53.865 --> 00:04:57.830
So that tells me that the application code is able to get

00:04:57.830 --> 00:05:02.135
the object in a decrypted form and read the contents.

00:05:02.135 --> 00:05:05.330
So I'm confident that after completing this exercise,

00:05:05.330 --> 00:05:10.550
you have a better understanding of how to use KMS key policies that can

00:05:10.550 --> 00:05:13.520
help protect your data by restricting or allowing

00:05:13.520 --> 00:05:17.490
applications the ability to access encrypted data.

