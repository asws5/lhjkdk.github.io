WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.460
Previously, we looked at using the AWS

00:00:02.460 --> 00:00:06.630
key Management Service encryption keys in applications that are running in

00:00:06.630 --> 00:00:10.050
the Cloud and options to ensure that objects stored in

00:00:10.050 --> 00:00:14.625
S3 storage are encrypted at rest using the key management service.

00:00:14.625 --> 00:00:18.540
Let's look at a few best practices for ensuring that the encryption keys

00:00:18.540 --> 00:00:23.385
themselves are managed securely using the AWS Key Management Service.

00:00:23.385 --> 00:00:25.050
As we touched on earlier,

00:00:25.050 --> 00:00:28.260
AWS Key Management Service provides various options

00:00:28.260 --> 00:00:31.710
for creating and managing master encryption keys.

00:00:31.710 --> 00:00:35.040
It's important to understand the difference between these options.

00:00:35.040 --> 00:00:39.995
The first is using AWS managed master encryption keys.

00:00:39.995 --> 00:00:43.940
This is the default and easiest type of KMS key to use.

00:00:43.940 --> 00:00:48.330
It requires very little management on the part of the customer.

00:00:48.560 --> 00:00:53.540
This key is provisioned automatically by KMS when a service such as

00:00:53.540 --> 00:00:58.970
S3 or EC2 needs to use KMS to encrypt underlying data.

00:00:58.970 --> 00:01:04.745
A separate master key would be created for each service that starts using KMS.

00:01:04.745 --> 00:01:09.545
For example, if you created a DynamoDB table, by default,

00:01:09.545 --> 00:01:12.475
it would be encrypted with the AWS managed

00:01:12.475 --> 00:01:17.540
KMS key and the user would not need to explicitly create a key.

00:01:17.540 --> 00:01:19.700
Once the table is created,

00:01:19.700 --> 00:01:23.110
you would see a new key also created in KMS.

00:01:23.110 --> 00:01:27.170
With this method, key rotation is also handled behind the scenes

00:01:27.170 --> 00:01:31.325
by AWS and keys are rotated every three years.

00:01:31.325 --> 00:01:36.380
Also, AWS managed keys do not incur usage costs.

00:01:36.380 --> 00:01:41.410
Permissions to AWS managed keys are also handled behind the scenes.

00:01:41.410 --> 00:01:47.450
Any principal or user who has access to a particular service would inherently have access

00:01:47.450 --> 00:01:53.920
to any encrypted data that the service had encrypted using the AWS managed keys.

00:01:53.920 --> 00:02:01.525
Using the example of DynamoDB table that has encryption using AWS managed keys,

00:02:01.525 --> 00:02:05.960
all users or roles in the account that have read access to

00:02:05.960 --> 00:02:10.880
the DynamoDB table would be able to read data from the table.

00:02:10.880 --> 00:02:14.180
The main drawback here is that we cannot apply

00:02:14.180 --> 00:02:18.140
the principle of least privileged access to the keys.

00:02:18.140 --> 00:02:21.410
It would not be possible to segment an isolate

00:02:21.410 --> 00:02:25.015
permissions to certain keys and encrypted data.

00:02:25.015 --> 00:02:27.170
In addition to this limitation,

00:02:27.170 --> 00:02:31.520
AWS managed keys are not available for applications to use for

00:02:31.520 --> 00:02:37.000
a client-side encryption since they are only available for use by AWS services.

00:02:37.000 --> 00:02:41.600
As you can see, this approach is acceptable if the sole requirement is

00:02:41.600 --> 00:02:46.175
to ensure the data is encrypted at rest in AWS data centers.

00:02:46.175 --> 00:02:51.445
This approach is also not recommended for accounts where sensitive data is present,

00:02:51.445 --> 00:02:56.780
since in the event of the AWS account or role compromise for some reason,

00:02:56.780 --> 00:02:59.875
encrypted data may not be protected.

00:02:59.875 --> 00:03:04.490
The second avenue for implementing the key management service is by creating

00:03:04.490 --> 00:03:10.010
customer master keys in the AWS key management service.

00:03:10.010 --> 00:03:12.890
In this situation, Cloud customers will

00:03:12.890 --> 00:03:16.375
explicitly provision and manage the key life cycle.

00:03:16.375 --> 00:03:21.620
The customer would also be responsible for managing permissions on the keys related to

00:03:21.620 --> 00:03:23.810
which entities can manage keys and

00:03:23.810 --> 00:03:28.220
which principles can use the keys for cryptographic operations.

00:03:28.220 --> 00:03:35.960
Behind the scenes, AWS will create the key material and rotate keys on a yearly basis.

00:03:35.960 --> 00:03:38.435
This is transparent to the user.

00:03:38.435 --> 00:03:43.235
The user does have the option to choose to manually rotate the keys.

00:03:43.235 --> 00:03:47.480
The main benefit to using customer managed keys is that permissions to

00:03:47.480 --> 00:03:52.055
manage and use the keys can be explicitly defined and controlled.

00:03:52.055 --> 00:03:54.755
This allows separation of duties,

00:03:54.755 --> 00:03:56.375
segmentation of key usage,

00:03:56.375 --> 00:03:58.810
and least privilege access.

00:03:58.810 --> 00:04:02.854
Again, using DynamoDB tables as an example,

00:04:02.854 --> 00:04:05.720
we can have much more flexibility to restrict

00:04:05.720 --> 00:04:09.850
access to data by restricting access to encryption keys.

00:04:09.850 --> 00:04:13.970
For example, we can have two separate master keys for

00:04:13.970 --> 00:04:17.975
two different sets of tables designated by data classification,

00:04:17.975 --> 00:04:21.235
such as sensitive versus non-sensitive.

00:04:21.235 --> 00:04:26.380
We can also assign certain IAM roles to be able to use the keys.

00:04:26.380 --> 00:04:31.220
Perhaps we want to segment two different applications to the respective tables.

00:04:31.220 --> 00:04:36.810
In that case, we would only allow the role for Application 1 to be able to use

00:04:36.810 --> 00:04:43.005
Key 1 and the role for Application 2 to be able to use Key 2.

00:04:43.005 --> 00:04:49.970
Application 2 would never be able to decrypt data that was encrypted by key number 1.

00:04:49.970 --> 00:04:53.230
We would want to also restrict management of

00:04:53.230 --> 00:04:56.935
the keys and key permissions to a separate IAM role.

00:04:56.935 --> 00:04:59.695
With that protection in place,

00:04:59.695 --> 00:05:03.250
application roles would not be able to change permissions on

00:05:03.250 --> 00:05:08.975
the keys in order to use the keys to decrypt the other application's data, for example.

00:05:08.975 --> 00:05:13.970
This approach is a great balance between manageability in security and will

00:05:13.970 --> 00:05:19.750
generally provide the capabilities mandated by most compliance and security standards.

00:05:19.750 --> 00:05:23.945
When new customer master keys are provisioned in KMS,

00:05:23.945 --> 00:05:28.645
by default, KMS creates and maintains the key material for you.

00:05:28.645 --> 00:05:34.595
However, KMS also provides the customer the option of importing their own key material,

00:05:34.595 --> 00:05:38.665
which may be maintained in a key store external to KMS.

00:05:38.665 --> 00:05:43.295
With this option, the customer has full control over the keys' life cycle,

00:05:43.295 --> 00:05:46.490
including exploration, deletion, and rotation.

00:05:46.490 --> 00:05:52.070
A potential use case for importing key material may be to maintain backup copies of

00:05:52.070 --> 00:05:57.775
the key material external to AWS to fulfill disaster recovery requirements.

00:05:57.775 --> 00:06:01.940
Customers may also find this option useful if they have a desire to

00:06:01.940 --> 00:06:07.230
use one-key management system for Cloud and on-premise infrastructure.

