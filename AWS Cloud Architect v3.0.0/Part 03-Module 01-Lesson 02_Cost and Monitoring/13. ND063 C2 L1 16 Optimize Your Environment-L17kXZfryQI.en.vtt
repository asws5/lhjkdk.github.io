WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.700
It's worth it to spend more time and money up

00:00:02.700 --> 00:00:06.195
front to realize greater savings over the long-term.

00:00:06.195 --> 00:00:11.220
Optimization is one of the most valuable skills a cloud architect can possess,

00:00:11.220 --> 00:00:14.355
because it has an immediate impact on the bottom line.

00:00:14.355 --> 00:00:19.785
To begin an optimization effort,you use monitoring to establish your baselines.

00:00:19.785 --> 00:00:23.490
From there, you can use your peak usage periods and develop

00:00:23.490 --> 00:00:28.005
an auto-scaling protocol based on those peak usage and request times.

00:00:28.005 --> 00:00:31.919
Another cost and usage optimization step you should consider,

00:00:31.919 --> 00:00:35.580
comes from our previous discussion on EC2 costs.

00:00:35.580 --> 00:00:40.050
You should use spot instances whenever possible and definitely in

00:00:40.050 --> 00:00:42.710
your development environments to reduce costs in

00:00:42.710 --> 00:00:45.829
a way that will greatly affect your monthly invoice.

00:00:45.829 --> 00:00:52.115
You can use AWS tools to manage your spot instances for maximum productivity.

00:00:52.115 --> 00:00:56.420
Using private IP addresses to transfer data for free,

00:00:56.420 --> 00:01:01.400
within the same availability zone will also provide a measurable cost-savings.

00:01:01.400 --> 00:01:05.870
Finally, if your organization has multiple AWS accounts,

00:01:05.870 --> 00:01:09.440
you can easily save by using consolidated billing.

00:01:09.440 --> 00:01:13.115
When you combine the billing for all of your AWS accounts,

00:01:13.115 --> 00:01:17.630
you may find that the volume of business you're doing with AWS qualifies you for

00:01:17.630 --> 00:01:19.865
discounts that you wouldn't otherwise receive

00:01:19.865 --> 00:01:22.580
if you were paying the bill for each account separately.

00:01:22.580 --> 00:01:24.940
How can we optimize our solutions,

00:01:24.940 --> 00:01:27.800
such that we get the most performance for our money?

00:01:27.800 --> 00:01:30.950
Well, it takes time, skill,

00:01:30.950 --> 00:01:33.845
and making small changes over time,

00:01:33.845 --> 00:01:37.450
and don't underestimate the role of monitoring.

00:01:37.450 --> 00:01:39.790
What time and experience?

00:01:39.790 --> 00:01:43.819
It is easy to detect areas where optimization is required,

00:01:43.819 --> 00:01:45.650
and it will become second nature,

00:01:45.650 --> 00:01:49.865
especially after you've seen how running services affect your monthly bill.

00:01:49.865 --> 00:01:52.220
We're going to cover how to hit the target of

00:01:52.220 --> 00:01:55.745
lowest cost and best performance using auto-scaling,

00:01:55.745 --> 00:02:01.310
or adding and reducing servers automatically based on time, usage and requests.

00:02:01.310 --> 00:02:03.830
First, it's important to understand how

00:02:03.830 --> 00:02:07.595
your application performs to select the best instance.

00:02:07.595 --> 00:02:10.730
From there, we can build an auto-scaling group to

00:02:10.730 --> 00:02:14.795
provide optimal service levels for your workloads at all times.

00:02:14.795 --> 00:02:18.980
Every hour, the AWS billing system looks at

00:02:18.980 --> 00:02:23.570
all EC2 instances that have been running in a particular AWS account.

00:02:23.570 --> 00:02:28.685
It then compares them with any reserved instances that have been purchased.

00:02:28.685 --> 00:02:31.445
It compares the following attributes;

00:02:31.445 --> 00:02:37.405
instance type, operating system, and availability zone.

00:02:37.405 --> 00:02:41.495
For each EC2 instance that matches a reserved instance,

00:02:41.495 --> 00:02:43.250
there would be no charge,

00:02:43.250 --> 00:02:45.290
because the cost is already been paid

00:02:45.290 --> 00:02:48.055
as part of the reserved instance purchase agreement.

00:02:48.055 --> 00:02:51.170
The reserved instance applies regardless of

00:02:51.170 --> 00:02:54.125
whether the instance was launched through auto-scaling or not.

00:02:54.125 --> 00:02:57.065
Because don't forget, when you reserved instances,

00:02:57.065 --> 00:03:00.140
you agree to the one or three year reservation payment.

00:03:00.140 --> 00:03:03.740
Therefore, if you have purchased one reserved instance and

00:03:03.740 --> 00:03:07.805
your auto-scaling group launches instances that match the reserve instance type,

00:03:07.805 --> 00:03:11.120
then one of the instances in your auto-scaling group will be from

00:03:11.120 --> 00:03:14.960
your prepaid allocation of reserved instances each hour.

00:03:14.960 --> 00:03:20.345
If you're auto-scaling group has a minimum of one and a maximum of four instances,

00:03:20.345 --> 00:03:24.185
then there will always be at least one EC2 instance running.

00:03:24.185 --> 00:03:28.160
So you would always receive the benefit of the reserved instance.

00:03:28.160 --> 00:03:32.465
That right there makes it worth it to reserve at least one instance.

00:03:32.465 --> 00:03:38.225
Any instance above one will be charged the on-demand price if that's all you have.

00:03:38.225 --> 00:03:40.670
So it is recommended that you use

00:03:40.670 --> 00:03:45.830
reserved instances for any instance that we'll be running continuously.

00:03:45.830 --> 00:03:49.610
Combined what we learned about reserved and spot instances to

00:03:49.610 --> 00:03:53.660
the mix with scaling and now our costs are much lower.

00:03:53.660 --> 00:03:56.285
Make sure you have selected the right reserved

00:03:56.285 --> 00:04:00.295
instance mix and that you're scaling follows the rules.

00:04:00.295 --> 00:04:03.725
You can use spot instances for auto-scaling,

00:04:03.725 --> 00:04:09.510
but is complicated and may not be worth it to risk applications availability.

