WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.180
Many Cloud architectures and environments are designed

00:00:03.180 --> 00:00:06.915
to host Internet-facing web applications and services.

00:00:06.915 --> 00:00:11.280
Once an Internet-facing application or resource comes online,

00:00:11.280 --> 00:00:14.760
it can be as little as a few minutes before external actors

00:00:14.760 --> 00:00:19.065
start testing those applications for exploitable vulnerabilities.

00:00:19.065 --> 00:00:21.705
To learn more about these types of attacks,

00:00:21.705 --> 00:00:25.710
I recommend you become familiar with the OWASP Top 10,

00:00:25.710 --> 00:00:27.960
which functions as a high-level list of

00:00:27.960 --> 00:00:33.240
the most common security risks that web applications may be susceptible to.

00:00:33.240 --> 00:00:36.600
Web application firewalls or WAFs are designed to

00:00:36.600 --> 00:00:39.630
sit between a client and an application to inspect

00:00:39.630 --> 00:00:42.770
application HTTP traffic and determine if

00:00:42.770 --> 00:00:46.205
the traffic patterns signify exploitation events.

00:00:46.205 --> 00:00:49.405
WAFs are then set up the block this type of traffic.

00:00:49.405 --> 00:00:53.810
Most WAF products continuously update their rule sets and allow you to

00:00:53.810 --> 00:00:58.480
tune them to add your own custom rules or manage false positives.

00:00:58.480 --> 00:01:01.040
There are a few different ways of incorporating

00:01:01.040 --> 00:01:04.925
WAF protection to defend against application-level exploits.

00:01:04.925 --> 00:01:09.740
Cloud-based WAF products such as Akamai or

00:01:09.740 --> 00:01:13.130
CloudFlare are set up so that clients can

00:01:13.130 --> 00:01:17.320
point to them as an entry point into the application.

00:01:17.320 --> 00:01:22.670
These are designated as content distribution network or CDN providers.

00:01:22.670 --> 00:01:27.310
However, they provide WAF capabilities as part of their offering.

00:01:27.310 --> 00:01:33.070
Cloud providers such as AWS also provide this type of service natively.

00:01:33.070 --> 00:01:39.140
AWS WAF can be placed in front of public facing application services such as

00:01:39.140 --> 00:01:43.174
CloudFront API Gateway or EC2-based workloads

00:01:43.174 --> 00:01:48.245
in a transparent manner so that application end points don't need to change.

00:01:48.245 --> 00:01:53.750
A WAF appliance or network-based WAF can be deployed into a VPC

00:01:53.750 --> 00:01:59.210
as a set of EC2 instances to protect EC2-based application traffic.

00:01:59.210 --> 00:02:01.800
Example vendors include F5,

00:02:01.800 --> 00:02:04.890
Forthnet, Improva, Cisco, etc.

00:02:04.890 --> 00:02:08.780
Now, these can be costly and complex to implement in

00:02:08.780 --> 00:02:13.685
what you would typically find in a traditional data center environment.

00:02:13.685 --> 00:02:18.590
Now, host-based WAFs are products that attempt to provide

00:02:18.590 --> 00:02:24.050
similar defense but are deployed as part of a web application server instance.

00:02:24.050 --> 00:02:27.260
One of the drawbacks to a host-based WAFs is that it can

00:02:27.260 --> 00:02:30.820
impact the resource consumption on the instance.

00:02:30.820 --> 00:02:33.045
What about serverless?

00:02:33.045 --> 00:02:36.875
Serverless applications also need to be defended.

00:02:36.875 --> 00:02:40.220
Many products offer capabilities to defend

00:02:40.220 --> 00:02:43.535
serverless applications from application exploits,

00:02:43.535 --> 00:02:46.430
such as those running in Lambda.

00:02:46.430 --> 00:02:51.265
Example products include Aqua, Twistlock, and PureSec.

00:02:51.265 --> 00:02:53.570
Depending on the application architecture,

00:02:53.570 --> 00:02:56.945
the method of defending the application may vary.

00:02:56.945 --> 00:02:59.810
Regardless of the type of WAF implemented,

00:02:59.810 --> 00:03:02.230
a few best practices to consider.

00:03:02.230 --> 00:03:06.320
Setup the WAF with identical configuration in lower environments for

00:03:06.320 --> 00:03:11.210
testing to ensure that your application still work as expected in production.

00:03:11.210 --> 00:03:15.205
Fine tuning may be required to rule out false positives.

00:03:15.205 --> 00:03:18.560
Perform penetration and exploit testing against

00:03:18.560 --> 00:03:22.580
applications to ensure that the WAF defense as expected.

00:03:22.580 --> 00:03:25.460
Test both with and without the WAF to get

00:03:25.460 --> 00:03:28.615
a better understanding of defensive capabilities.

00:03:28.615 --> 00:03:33.930
Enable WAF logging and export logs to your security monitoring tools.

00:03:33.930 --> 00:03:37.685
Identify all public endpoints for your applications,

00:03:37.685 --> 00:03:42.605
including CloudFront application, load balancers, and API gateway.

00:03:42.605 --> 00:03:46.535
If your application is exposed to the Internet with other methods,

00:03:46.535 --> 00:03:50.795
consider moving your application behind these mentioned services.

00:03:50.795 --> 00:03:56.580
We will now explore using the AWS WAF product to defend a web application.

