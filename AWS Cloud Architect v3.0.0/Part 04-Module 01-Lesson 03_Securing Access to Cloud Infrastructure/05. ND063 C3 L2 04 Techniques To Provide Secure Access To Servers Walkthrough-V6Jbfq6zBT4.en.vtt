WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.230
We will now walk through some recommendations to ensure that your servers have

00:00:04.230 --> 00:00:09.180
a basic level of security protection when it comes to configuring and providing access.

00:00:09.180 --> 00:00:13.755
My first and foremost recommendation for servers to prevent unauthorized access

00:00:13.755 --> 00:00:18.465
is to deploy servers as immutable components. What does this mean?

00:00:18.465 --> 00:00:22.395
This means that once an instance is launched from a machine image,

00:00:22.395 --> 00:00:24.825
it does not undergo any changes.

00:00:24.825 --> 00:00:28.380
Any changes that need to be done in order to install and run

00:00:28.380 --> 00:00:32.685
application code will be done by building a preconfigured image.

00:00:32.685 --> 00:00:35.885
Let's look at how this image would be built.

00:00:35.885 --> 00:00:40.055
Immutable instances are launched from virtual machine images

00:00:40.055 --> 00:00:44.315
that are preloaded with everything that is required to run an application.

00:00:44.315 --> 00:00:47.600
Starting with the base operating system image,

00:00:47.600 --> 00:00:50.540
we can use automation to apply security patching,

00:00:50.540 --> 00:00:54.910
hardening and any other custom operating system configuration.

00:00:54.910 --> 00:00:58.760
This hardened image can be consumed by application teams to

00:00:58.760 --> 00:01:03.880
customize with their application code and produce an image ready for deployment.

00:01:03.880 --> 00:01:09.320
Scanning the image for security vulnerabilities is also a good idea prior to deployment.

00:01:09.320 --> 00:01:13.085
Once the image is deployed as an instance into the environment,

00:01:13.085 --> 00:01:14.780
it does not get updated.

00:01:14.780 --> 00:01:19.294
When it's time to update the application or make any other changes to the instance,

00:01:19.294 --> 00:01:24.085
a new image is created and deployed in place of the previous version.

00:01:24.085 --> 00:01:26.495
With this process in place,

00:01:26.495 --> 00:01:30.860
no individuals need to log into an instance once it's been deployed.

00:01:30.860 --> 00:01:33.950
This is a huge step in the right direction for protecting

00:01:33.950 --> 00:01:37.960
instances from security breaches and unauthorized access.

00:01:37.960 --> 00:01:41.565
If immutable instances are not an option in your environment,

00:01:41.565 --> 00:01:43.235
the next best thing is to use

00:01:43.235 --> 00:01:48.310
a configuration management tool to enforce hardening and configuration policies.

00:01:48.310 --> 00:01:51.890
In this situation, an instance system configuration

00:01:51.890 --> 00:01:55.010
is maintained in a version control repository.

00:01:55.010 --> 00:02:00.815
Changes are made by users updating the code and there's no need to log into the system.

00:02:00.815 --> 00:02:05.630
In the event where a user deployed an instance with insecure configuration,

00:02:05.630 --> 00:02:07.010
let's say for example,

00:02:07.010 --> 00:02:10.224
allowing access using personal keys or passwords,

00:02:10.224 --> 00:02:12.860
the configuration management tool would override

00:02:12.860 --> 00:02:15.800
this by applying the correct configuration.

00:02:15.800 --> 00:02:20.440
Some popular tools in this regard are Ansible, Chef, and Puppet.

00:02:20.440 --> 00:02:23.090
But if console access is still needed,

00:02:23.090 --> 00:02:26.150
configuration management tools can be used to apply

00:02:26.150 --> 00:02:32.320
other secured access methods such as privileged access management or AWS systems manager.

00:02:32.320 --> 00:02:34.040
Taking this step further,

00:02:34.040 --> 00:02:38.870
the use of a privilege access management or PAM tool can provide additional benefits

00:02:38.870 --> 00:02:44.390
such as time-based or temporary access to elevated privileges,

00:02:44.390 --> 00:02:49.655
granular privileged management, session recording and audit trails,

00:02:49.655 --> 00:02:53.905
password and secretes management, and multifactor authentication.

00:02:53.905 --> 00:02:56.945
There are many products and solutions on the market that

00:02:56.945 --> 00:02:59.884
provide this type of access management support,

00:02:59.884 --> 00:03:03.655
a few brands include Dichotic, CentralPhi and CyberArk.

00:03:03.655 --> 00:03:08.995
AWS provides similar functionality with systems manager, session manager tool.

00:03:08.995 --> 00:03:13.340
You'll have the opportunity to see this in action in the next exercise.

00:03:13.340 --> 00:03:17.524
Finally, in addition to choosing a method for providing access,

00:03:17.524 --> 00:03:18.950
it's critical to observe

00:03:18.950 --> 00:03:24.060
a few additional best-practices: Keep instances up-to-date and patched,

00:03:24.060 --> 00:03:29.380
enforce hardening that encompasses security best practices around OS hardening,

00:03:29.380 --> 00:03:32.915
add monitoring for vulnerabilities to ensure that

00:03:32.915 --> 00:03:38.050
either OS or application vulnerabilities are addressed as soon as possible,

00:03:38.050 --> 00:03:43.280
implement monitoring and alerting for suspicious events using tools such as

00:03:43.280 --> 00:03:49.360
intrusion detection systems or security information and event management tools.

00:03:49.360 --> 00:03:53.960
To wrap things up, it's quite obvious that providing and managing secure access to

00:03:53.960 --> 00:03:58.480
instances is quite challenging and come with its own set of risks.

00:03:58.480 --> 00:04:00.590
From a security perspective,

00:04:00.590 --> 00:04:05.330
it is advised to move away from this type of model and use prebuilt images with

00:04:05.330 --> 00:04:07.940
the use of a configuration management tool in

00:04:07.940 --> 00:04:11.759
order to limit or eliminate the need for access.

